#ifndef MANTLE_HPP
#define MANTLE_HPP

/*
	Types and constants
*/

#define GR_CHAR char
#define GR_UINT32 uint32_t
#define GR_UINT64 uint64_t
#define GR_FLOAT float
#define GR_BOOL uint32_t
#define GR_VOID void
#define GR_SIZE size_t
#define GR_UINT8 uint8_t
#define GR_INT int32_t
#define GR_UINT uint32_t
#define GR_ENUM int32_t
#define GR_FLAGS int32_t
#define GR_PHYSICAL_GPU uint64_t
#define GR_DEVICE uint64_t
#define GR_WSI_WIN_DISPLAY uint64_t
#define GR_MAX_PHYSICAL_GPUS 4

#define GR_API_VERSION 1

#define GR_STDCALL __stdcall

typedef enum {
	GR_SUCCESS = 0x10000,
	GR_UNSUPPORTED,
	GR_NOT_READY,
	GR_TIMEOUT,
	GR_EVENT_SET,
	GR_EVENT_RESET,

	GR_ERROR_UNKNOW = 0x11000,
	GR_ERROR_UNAVAILABLE,
	GR_ERROR_INITIALIZATION_FAILED,
	GR_ERROR_OUT_OF_MEMORY,
	GR_ERROR_OUT_OF_GPU_MEMORY,
	GR_ERROR_DEVICE_ALREADY_CREATED,
	GR_ERROR_DEVICE_LOST,
	GR_ERROR_INVALID_POINTER,
	GR_ERROR_INVALID_VALUE,
	GR_ERROR_INVALID_HANDLE,
	GR_ERROR_INVALID_ORDINAL,
	GR_ERROR_INVALID_MEMORY_SIZE,
	GR_ERROR_INVALID_EXTENSION,
	GR_ERROR_INVALID_FLAGS,
	GR_ERROR_INVALID_ALIGNMENT,
	GR_ERROR_INVALID_FORMAT,
	GR_ERROR_INVALID_IMAGE,
	GR_ERROR_INVALID_DESCRIPTOR_SET_DATA,
	GR_ERROR_INVALID_QUEUE_TYPE,
	GR_ERROR_INVALID_OBJECT_TYPE,
	GR_ERROR_UNSUPPORTED_SHADER_IL_VERSION,
	GR_ERROR_BAD_SHADER_CODE,
	GR_ERROR_BAD_PIPELINE_DATA,
	GR_ERROR_TOO_MANY_MEMORY_REFERENCES,
	GR_ERROR_NOT_MAPPABLE,
	GR_ERROR_MEMORY_MAP_FAILED,
	GR_ERROR_MEMORY_UNMAP_FAILED,
	GR_ERROR_INCOMPATIBLE_DEVICE,
	GR_ERROR_INCOMPATIBLE_DRIVER,
	GR_ERROR_INCOMPLETE_COMMAND_BUFFER,
	GR_ERROR_BUILDING_COMMAND_BUFFER,
	GR_ERROR_MEMORY_NOT_BOUND,
	GR_ERROR_INCOMPATIBLE_QUEUE,
	GR_ERROR_NOT_SHAREABLE
} GR_RESULT;

typedef enum _GR_INFO_TYPE {
	GR_INFO_TYPE_PHYSICAL_GPU_PROPERTIES = 0x6100,
	GR_INFO_TYPE_PHYSICAL_GPU_PERFORMANCE,
	GR_INFO_TYPE_PHYSICAL_GPU_QUEUE_PROPERTIES,
	GR_INFO_TYPE_PHYSICAL_GPU_MEMORY_PROPERTIES,
	GR_INFO_TYPE_PHYSICAL_GPU_IMAGE_PROPERTIES,
	GR_INFO_TYPE_MEMORY_HEAP_PROPERTIES = 0x6200,
	GR_INFO_TYPE_FORMAT_PROPERTIES = 0x6300,
	GR_INFO_TYPE_SUBRESOURCE_LAYOUT = 0x6400,
	GR_INFO_TYPE_MEMORY_REQUIREMENTS = 0x6800,
	GR_INFO_TYPE_PARENT_DEVICE,
	GR_INFO_TYPE_PARENT_PHYSICAL_GPU,
} GR_INFO_TYPE;

typedef enum _GR_PHYSICAL_GPU_TYPE {
	GR_GPU_TYPE_OTHER = 0x3000,
	GR_GPU_TYPE_INTEGRATED,
	GR_GPU_TYPE_DISCRETE,
	GR_GPU_TYPE_VIRTUAL,
} GR_PHYSICAL_GPU_TYPE;

typedef enum _GR_QUEUE_TYPE {
	GR_QUEUE_UNIVERSAL = 0x1000,
	GR_QUEUE_COMPUTE,
	GR_EXT_QUEUE_DMA = 0x00300200,
	GR_EXT_QUEUE_TIMER
} GR_QUEUE_TYPE;

typedef enum _GR_VALIDATION_LEVEL {
	GR_VALIDATION_LEVEL_0 = 0x8000,
	GR_VALIDATION_LEVEL_1,
	GR_VALIDATION_LEVEL_2,
	GR_VALIDATION_LEVEL_3,
	GR_VALIDATION_LEVEL_4,
} GR_VALIDATION_LEVEL;

typedef enum _GR_DEVICE_CREATE_FLAGS {
	GR_DEVICE_CREATE_VALIDATION = 0x00000001,
} GR_DEVICE_CREATE_FLAGS;

typedef enum _GR_CHANNEL_FORMAT {
	GR_CH_FMT_UNDEFINED,
	GR_CH_FMT_R4G4,
	GR_CH_FMT_R4G4B4A4,
	GR_CH_FMT_R5G6B5,
	GR_CH_FMT_B5G6R5,
	GR_CH_FMT_R5G5B5A1,
	GR_CH_FMT_R8,
	GR_CH_FMT_R8G8,
	GR_CH_FMT_R8G8B8A8,
	GR_CH_FMT_B8G8R8A8,
	GR_CH_FMT_R10G11B11,
	GR_CH_FMT_R11G11B10,
	GR_CH_FMT_R10G10B10A2,
	GR_CH_FMT_R16,
	GR_CH_FMT_R16G16,
	GR_CH_FMT_R16G16B16A16,
	GR_CH_FMT_R32,
	GR_CH_FMT_R32G32,
	GR_CH_FMT_R32G32B32,
	GR_CH_FMT_R32G32B32A32,
	GR_CH_FMT_R16G8,
	GR_CH_FMT_R32G8,
	GR_CH_FMT_R9G9B9E5,
	GR_CH_FMT_BC1,
	GR_CH_FMT_BC2,
	GR_CH_FMT_BC3,
	GR_CH_FMT_BC4,
	GR_CH_FMT_BC5,
	GR_CH_FMT_BC6U,
	GR_CH_FMT_BC6S,
	GR_CH_FMT_BC7
} GR_CHANNEL_FORMAT;

typedef enum _GR_NUM_FORMAT {
	GR_NUM_FMT_UNDEFINED,
	GR_NUM_FMT_UNORM,
	GR_NUM_FMT_SNORM,
	GR_NUM_FMT_UINT,
	GR_NUM_FMT_SINT,
	GR_NUM_FMT_FLOAT,
	GR_NUM_FMT_SRGB,
	GR_NUM_FMT_DS
} GR_NUM_FORMAT;

// Guesses
#define GR_GPU_SIZE size_t
#define GR_MAX_PHYSICAL_GPU_NAME 255

/*
	Callback functions
*/

typedef GR_VOID* (GR_STDCALL *GR_ALLOC_FUNCTION)(
	GR_SIZE size,
	GR_SIZE alignment,
	GR_ENUM allocType);

typedef GR_VOID(GR_STDCALL *GR_FREE_FUNCTION)(
	GR_VOID* pMem);

/*
	Structures
*/

typedef struct _GR_APPLICATION_INFO {
	const GR_CHAR* pAppName;
	GR_UINT32 appVersion;
	const GR_CHAR* pEngineName;
	GR_UINT32 engineVersion;
	GR_UINT32 apiVersion;
} GR_APPLICATION_INFO;

typedef struct _GR_ALLOC_CALLBACKS {
	GR_ALLOC_FUNCTION pfnAlloc;
	GR_FREE_FUNCTION pfnFree;
} GR_ALLOC_CALLBACKS;

typedef struct _GR_PHYSICAL_GPU_PROPERTIES {
	GR_UINT32 apiVersion;
	GR_UINT32 driverVersion;
	GR_UINT32 vendorId;
	GR_UINT32 deviceId;
	GR_ENUM gpuType;
	GR_CHAR gpuName[GR_MAX_PHYSICAL_GPU_NAME];
	GR_UINT maxMemRefsPerSubmission;
	GR_GPU_SIZE reserved;
	GR_GPU_SIZE maxInlineMemoryUpdateSize;
	GR_UINT maxBoundDescriptorSets;
	GR_UINT maxThreadGroupSize;
	GR_UINT64 timestampFrequency;
	GR_BOOL multiColorTargetClears;
} GR_PHYSICAL_GPU_PROPERTIES;

typedef struct _GR_PHYSICAL_GPU_PERFORMANCE {
	GR_FLOAT maxGpuClock;
	GR_FLOAT aluPerClock;
	GR_FLOAT texPerClock;
	GR_FLOAT primsPerClock;
	GR_FLOAT pixelsPerClock;
} GR_PHYSICAL_GPU_PERFORMANCE;

typedef struct _GR_PHYSICAL_GPU_QUEUE_PROPERTIES {
	GR_ENUM queueType;
	GR_UINT queueCount;
	GR_UINT maxAtomicCounters;
	GR_BOOL supportsTimestamps;
} GR_PHYSICAL_GPU_QUEUE_PROPERTIES;

typedef struct _GR_DEVICE_QUEUE_CREATE_INFO {
	GR_ENUM queueType;
	GR_UINT queueCount;
} GR_DEVICE_QUEUE_CREATE_INFO;

typedef struct _GR_DEVICE_CREATE_INFO {
	GR_UINT queueRecordCount;
	const GR_DEVICE_QUEUE_CREATE_INFO* pRequestedQueues;
	GR_UINT extensionCount;
	const GR_CHAR*const* ppEnabledExtensionNames;
	GR_ENUM maxValidationLevel;
	GR_FLAGS flags;
} GR_DEVICE_CREATE_INFO;

typedef struct _GR_EXTENT2D {
	GR_INT width;
	GR_INT height;
} GR_EXTENT2D;

typedef struct _GR_FORMAT {
	GR_UINT32 channelFormat : 16;
	GR_UINT32 numericFormat : 16;
} GR_FORMAT;

typedef struct _GR_WSI_WIN_DISPLAY_MODE {
	GR_EXTENT2D extent;
	GR_FORMAT format;
	GR_UINT refreshRate;
	GR_BOOL stereo;
	GR_BOOL crossDisplayPresent;
} GR_WSI_WIN_DISPLAY_MODE;

/*
	API function pointers
*/

typedef GR_RESULT (GR_STDCALL *grInitAndEnumerateGpusPtr)(
	const GR_APPLICATION_INFO* pAppInfo,
	const GR_ALLOC_CALLBACKS* pAllocCb,
	GR_UINT* pGpuCount,
	GR_PHYSICAL_GPU gpus[GR_MAX_PHYSICAL_GPUS]);

typedef GR_RESULT (GR_STDCALL *grGetGpuInfoPtr)(
	GR_PHYSICAL_GPU gpu,
	GR_ENUM infoType,
	GR_SIZE* pDataSize,
	GR_VOID* pData);

typedef GR_RESULT (GR_STDCALL *grGetExtensionSupportPtr)(
	GR_PHYSICAL_GPU gpu,
	const GR_CHAR* pExtName);

typedef GR_RESULT (GR_STDCALL *grCreateDevicePtr)(
	GR_PHYSICAL_GPU gpu,
	const GR_DEVICE_CREATE_INFO* pCreateInfo,
	GR_DEVICE* pDevice);

typedef GR_RESULT (GR_STDCALL *grWsiWinGetDisplaysPtr)(
	GR_DEVICE device,
	GR_UINT* pDisplayCount,
	GR_WSI_WIN_DISPLAY* pDisplayList);

typedef GR_RESULT (GR_STDCALL *grWsiWinGetDisplayModeListPtr)(
	GR_WSI_WIN_DISPLAY display,
	GR_UINT* pDisplayModeCount,
	GR_WSI_WIN_DISPLAY_MODE* pDisplayModeList);

#endif