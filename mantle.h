#ifndef MANTLE_HPP
#define MANTLE_HPP

/*
	Types and constants
*/

#define GR_CHAR char
#define GR_UINT32 uint32_t
#define GR_VOID void
#define GR_SIZE size_t
#define GR_UINT8 uint8_t
#define GR_UINT uint64_t
#define GR_ENUM int32_t
#define GR_FLAGS int32_t

#define GR_API_VERSION 1

#define GR_STDCALL __stdcall

typedef enum {
	GR_SUCCESS = 0x10000,
	GR_UNSUPPORTED,
	GR_NOT_READY,
	GR_TIMEOUT,
	GR_EVENT_SET,
	GR_EVENT_RESET,

	GR_ERROR_UNKNOW = 0x11000,
	GR_ERROR_UNAVAILABLE,
	GR_ERROR_INITIALIZATION_FAILED,
	GR_ERROR_OUT_OF_MEMORY,
	GR_ERROR_OUT_OF_GPU_MEMORY,
	GR_ERROR_DEVICE_ALREADY_CREATED,
	GR_ERROR_DEVICE_LOST,
	GR_ERROR_INVALID_POINTER,
	GR_ERROR_INVALID_VALUE,
	GR_ERROR_INVALID_HANDLE,
	GR_ERROR_INVALID_ORDINAL,
	GR_ERROR_INVALID_MEMORY_SIZE,
	GR_ERROR_INVALID_EXTENSION,
	GR_ERROR_INVALID_FLAGS,
	GR_ERROR_INVALID_ALIGNMENT,
	GR_ERROR_INVALID_FORMAT,
	GR_ERROR_INVALID_IMAGE,
	GR_ERROR_INVALID_DESCRIPTOR_SET_DATA,
	GR_ERROR_INVALID_QUEUE_TYPE,
	GR_ERROR_INVALID_OBJECT_TYPE,
	GR_ERROR_UNSUPPORTED_SHADER_IL_VERSION,
	GR_ERROR_BAD_SHADER_CODE,
	GR_ERROR_BAD_PIPELINE_DATA,
	GR_ERROR_TOO_MANY_MEMORY_REFERENCES,
	GR_ERROR_NOT_MAPPABLE,
	GR_ERROR_MEMORY_MAP_FAILED,
	GR_ERROR_MEMORY_UNMAP_FAILED,
	GR_ERROR_INCOMPATIBLE_DEVICE,
	GR_ERROR_INCOMPATIBLE_DRIVER,
	GR_ERROR_INCOMPLETE_COMMAND_BUFFER,
	GR_ERROR_BUILDING_COMMAND_BUFFER,
	GR_ERROR_MEMORY_NOT_BOUND,
	GR_ERROR_INCOMPATIBLE_QUEUE,
	GR_ERROR_NOT_SHAREABLE
} GR_RESULT;

typedef enum _GR_QUEUE_TYPE {
	GR_QUEUE_UNIVERSAL = 0x1000,
	GR_QUEUE_COMPUTE = 0x1001,
} GR_QUEUE_TYPE;

typedef enum _GR_VALIDATION_LEVEL {
	GR_VALIDATION_LEVEL_0 = 0x8000,
	GR_VALIDATION_LEVEL_1 = 0x8001,
	GR_VALIDATION_LEVEL_2 = 0x8002,
	GR_VALIDATION_LEVEL_3 = 0x8003,
	GR_VALIDATION_LEVEL_4 = 0x8004,
} GR_VALIDATION_LEVEL;

typedef enum _GR_DEVICE_CREATE_FLAGS {
	GR_DEVICE_CREATE_VALIDATION = 0x00000001,
} GR_DEVICE_CREATE_FLAGS;

// Guesses
#define GR_PHYSICAL_GPU uint64_t
#define GR_DEVICE uint64_t
#define GR_MAX_PHYSICAL_GPUS 16
#define GR_NULL_HANDLE 0

/*
	Callback functions
*/

typedef GR_VOID* (GR_STDCALL *GR_ALLOC_FUNCTION)(
	GR_SIZE size,
	GR_SIZE alignment,
	GR_ENUM allocType);

typedef GR_VOID(GR_STDCALL *GR_FREE_FUNCTION)(
	GR_VOID* pMem);

/*
	Structures
*/

typedef struct _GR_APPLICATION_INFO {
	const GR_CHAR* pAppName;
	GR_UINT32 appVersion;
	const GR_CHAR* pEngineName;
	GR_UINT32 engineVersion;
	GR_UINT32 apiVersion;
} GR_APPLICATION_INFO;

typedef struct _GR_ALLOC_CALLBACKS {
	GR_ALLOC_FUNCTION pfnAlloc;
	GR_FREE_FUNCTION pfnFree;
} GR_ALLOC_CALLBACKS;

typedef struct _GR_DEVICE_QUEUE_CREATE_INFO {
	GR_ENUM queueType;
	GR_UINT queueCount;
} GR_DEVICE_QUEUE_CREATE_INFO;

typedef struct _GR_DEVICE_CREATE_INFO {
	GR_UINT queueRecordCount;
	const GR_DEVICE_QUEUE_CREATE_INFO* pRequestedQueues;
	GR_UINT extensionCount;
	const GR_CHAR*const* ppEnabledExtensionNames;
	GR_ENUM maxValidationLevel;
	GR_FLAGS flags;
} GR_DEVICE_CREATE_INFO;

/*
	API function pointers
*/

typedef GR_RESULT (GR_STDCALL *grInitAndEnumerateGpusPtr)(
	const GR_APPLICATION_INFO* pAppInfo,
	const GR_ALLOC_CALLBACKS* pAllocCb,
	GR_UINT* pGpuCount,
	GR_PHYSICAL_GPU gpus[GR_MAX_PHYSICAL_GPUS]);

typedef GR_RESULT (GR_STDCALL *grCreateDevicePtr)(
	GR_PHYSICAL_GPU gpu,
	const GR_DEVICE_CREATE_INFO* pCreateInfo,
	GR_DEVICE* pDevice);

#endif